// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "driverAdapters"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    // If you want to use Prisma Migrate, you will need to manually create a shadow database
    // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
    // make sure to append ?connect_timeout=10 to the connection string
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Type {
    AEG
    AEP
    GBB
    GBBR
    HPA
    PTW
    GEAR
    Sniper
    Other
}

enum SubScription {
    FREE
    HOBBY
    GEARDO
    PREMIUM
}

model User {
    id                    String                 @id @default(cuid())
    clerkId               String                 @unique
    stripeId              String?                @unique
    sub                   SubScription?          @default(FREE)
    username              String?
    firstName             String
    lastName              String
    email                 String?                @unique
    avatar                String?
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    Listing               Listing[]
    ratings               Rating[]               @relation("user")
    ratingsGiven          Rating[]               @relation("from")
    chats                 UsersChat[]
    ratingCreationSession RatingCreatorSession[] @relation("user")
    ratingSessionToMe     RatingCreatorSession[] @relation("target")
}

model Rating {
    id        String               @id @default(cuid())
    rating    Int
    text      String
    user      User                 @relation("user", fields: [userId], references: [id])
    userId    String
    from      User                 @relation("from", fields: [fromId], references: [id])
    fromId    String
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt
    listing   Listing?             @relation(fields: [listingId], references: [id])
    listingId String?              @unique
    session   RatingCreatorSession @relation(fields: [sessionId], references: [id])
    sessionId String               @unique

    @@unique([userId, listingId])
}

model RatingCreatorSession {
    id        String   @id @default(cuid())
    rating    Rating?
    ratingId  String?
    user      User     @relation("user", fields: [userId], references: [id])
    userId    String
    target    User     @relation("target", fields: [targetId], references: [id])
    targetId  String
    createdAt DateTime @default(now())
}

model Listing {
    id          String    @id @default(cuid())
    title       String
    description String
    price       Float
    images      String[]
    type        Type
    delivery    Boolean?
    sold        Boolean   @default(false)
    seenCount   Int       @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    History     History[]
    rating      Rating?

    @@unique([title, userId])
}

model History {
    id        String   @id @default(cuid())
    seenCount Int
    listing   Listing  @relation(fields: [listingId], references: [id])
    listingId String
    createdAt DateTime @default(now())
}

model UsersChat {
    id                   String @id @default(cuid())
    users                User[]
    firebaseCollectionId String
}

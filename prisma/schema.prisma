// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    // provider = "cockroachdb"
    // url      = env("DATABASE_URL")
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    // If you want to use Prisma Migrate, you will need to manually create a shadow database
    // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
    // make sure to append ?connect_timeout=10 to the connection string
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Type {
    AEG
    AEP
    GBB
    GBBR
    HPA
    PTW
    GEAR
    Sniper
    Other
}

enum SubScription {
    FREE
    HOBBY
    GEARDO
    PREMIUM
}

model User {
    id           String        @id @default(cuid())
    clerkId      String        @unique
    stripeId     String?       @unique
    sub          SubScription? @default(FREE)
    username     String?
    firstName    String
    lastName     String
    email        String?       @unique
    avatar       String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    Listing      Listing[]
    // seenChanges Changelog[]
    ratings      Rating[]      @relation("user")
    ratingsGiven Rating[]      @relation("from")
}

model Rating {
    id        String   @id @default(cuid())
    rating    Int
    text      String
    user      User     @relation("user", fields: [userId], references: [id])
    userId    String
    from      User     @relation("from", fields: [fromId], references: [id])
    fromId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    listing   Listing  @relation(fields: [listingId], references: [id])
    listingId String   @unique

    @@unique([userId, listingId])
}

model Listing {
    id          String    @id @default(cuid())
    title       String
    description String
    price       Float
    images      String[]
    type        Type
    delivery    Boolean?
    sold        Boolean   @default(false)
    seenCount   Int       @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Chat        Chat[]
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    History     History[]
    rating      Rating?
    brand       Brand?    @relation(fields: [brandId], references: [id])
    brandId     String?

    @@unique([title, userId])
}

model Brand {
    id        String    @id @default(cuid())
    name      String
    isFamous  Boolean   @default(false)
    logo      String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Listing   Listing[]
}

model History {
    id        String   @id @default(cuid())
    seenCount Int
    listing   Listing  @relation(fields: [listingId], references: [id])
    listingId String
    createdAt DateTime @default(now())
}

model Chat {
    id        String    @id @default(cuid())
    listing   Listing   @relation(fields: [listingId], references: [id])
    userId    String
    listingId String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Message   Message[]
}

model Message {
    id        String   @id @default(cuid())
    text      String
    userId    String
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Changelog {
//     id        String   @id @default(cuid())
//     text      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     seenBy    User[]
// }
